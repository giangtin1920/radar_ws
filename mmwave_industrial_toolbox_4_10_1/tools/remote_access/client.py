"""
 @file  client.py

 @brief
   Receives mmWave UART stream, parses TLVs, and writes PCL to csv

Copyright (C) 2021 Texas Instruments Incorporated - http://www.ti.com/

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 
  Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
 
  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the
  distribution.
 
  Neither the name of Texas Instruments Incorporated nor the names of
  its contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

"""
This script was designed to receive the packets from the client via sockets.
The script also parses these packets to capture the data from the mmWave sensor. 
The server nor the client manipulates the data as to preserve the data format as 
described in the mmWave SDK. 
For more information regarding the sensor output data format, install the mmWave SDK
and then follow this link:
file:///C:/ti/mmwave_sdk_03_05_00_04/packages/ti/demo/xwr68xx/mmw/docs/doxygen/html/index.html#output 
The mmWave SDK can be installed from here: 
https://www.ti.com/tool/MMWAVE-SDK

Point cloud data are saved to a CSV file generated by this script. 

This was tested with Python 3.7, mmWave SDK 3.5, and IWR6843ISK. 
"""

import socket, struct
import time

HOST = '127.0.0.1'  # Standard loopback interface address is 127.0.0.1 (localhost)
PORT = 65432        # Port to listen on (non-privileged ports are > 1023)

filename = "data_{ts}.csv".format(ts=time.strftime("%Y%m%d-%H%M"))

SOCKET_TIMEOUT_TIME = 20.0

def tlvHeaderDecode(data):
    tlvType, tlvLength = struct.unpack('2I', data)
    return tlvType, tlvLength

def parseDetectedObjects(data, tlvLength, numDetectedObj, frameNum):
    print("\tNum Detect Obj:\t%d "%(numDetectedObj))
    pointCloud = ""
    for i in range(numDetectedObj):
        x, y, z, vel = struct.unpack('4f', data[16*i:16*i+16])
        pointCloud += "%d, %07.3f, %07.3f, %07.3f, %07.3f\n" % (frameNum, x, y, z, vel)
    return pointCloud

def parseRangeProfile(data, tlvLength):
    for i in range(256):
        rangeProfile = struct.unpack('H', data[2*i:2*i+2])
        #print("\tRangeProf[%d]:\t%07.3f "%(i, rangeProfile[0] * 1.0 * 6 / 8  / (1 << 8)))


def parseStats(data, tlvLength):
    interProcess, transmitOut, frameMargin, chirpMargin, activeCPULoad, interCPULoad = struct.unpack('6I', data[:24])
    print("\tOutputMsgStats:\t%d "%(6))
    print("\t\tChirpMargin:\t%d "%(chirpMargin))
    print("\t\tFrameMargin:\t%d "%(frameMargin))
    print("\t\tInterCPULoad:\t%d "%(interCPULoad))
    print("\t\tActiveCPULoad:\t%d "%(activeCPULoad))
    print("\t\tTransmitOut:\t%d "%(transmitOut))
    print("\t\tInterprocess:\t%d "%(interProcess))

def parseSideInfo(data, tlvLength, numObj):
    for i in range(numObj):
        snr, noise = struct.unpack('2h', data[:4])
        #print("\tSNR:\t %d " % (snr))
        #print("\tNoise:\t %d " % (noise))
        data = data[:4]
    

def parseTempStats(data, tlvLength):
    reportValid, time, tempRX0, tempRX1, tempRX2, tempRX3, tempTX0, tempTX1, tempTX2, tempPM, tempDIG0, tempDIG1 = struct.unpack('2I10h', data[:28])
    print("\tTempTX0:\t%d " % (tempTX0))

headerLength = 40
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    print("Binding to IP: %s"%HOST)
    s.bind((HOST, PORT))
    s.listen()
    s.settimeout(SOCKET_TIMEOUT_TIME)
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        with open(filename, "w", 1) as result:
            result.write("FrameNum, X, Y, Z, Velocity\n")
            while True:
                data = conn.recv(1024)
                if not data:
                    break
                header = data[:headerLength]
                try: 
                    magic, version, totalLength, platform, frameNum, cpuCycles, numObj, numTLVs, subFrameNum = struct.unpack('Q8I', header)
                except: 
                    print("Improper TLV structure found: ", (data,))
                    break
                pendingBytes = totalLength - headerLength
                data = data[headerLength:]
                for i in range(numTLVs):
                    tlvType, tlvLength = tlvHeaderDecode(data[:8])
                    data = data[8:]
                    if (tlvType == 1):
                        framePointCloud = parseDetectedObjects(data, tlvLength, numObj, frameNum)
                        result.write(framePointCloud)
                    elif (tlvType == 2):
                        parseRangeProfile(data, tlvLength)
                    elif (tlvType == 6):
                        parseStats(data, tlvLength)
                    elif (tlvType == 7):
                        parseSideInfo(data, tlvLength, numObj)
                    elif (tlvType == 9):
                        parseTempStats(data, tlvLength)
                    else:
                        print("Unidentified tlv type %d"%(tlvType))                
                    data = data[tlvLength:]
                    pendingBytes -= (8+tlvLength)
                data = data[pendingBytes:]

